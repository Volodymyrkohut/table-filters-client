{
  "version": 3,
  "sources": ["../src/components/filters/TableFiltersClient/TableFiltersClient.tsx", "../src/components/ui/controls/validations.ts", "../src/components/filters/FiltersRow/FiltersRow.tsx", "../src/components/filters/FilterSwitchValueField/FilterSwitchValueField.tsx", "../src/const/filters-const.ts", "../src/components/ui/controls/AppReactSelectPaginateControl.tsx", "../src/components/ui/controls/components/LayoutControl/LayoutControl.tsx", "../src/components/ui/icons/fields/IconImportant.tsx", "../src/components/ui/fields/FieldReactSelectPaginate/FieldReactSelectPaginate.tsx", "../src/components/ui/controls/AppReactSelectControl.tsx", "../src/components/ui/fields/FieldReactSelect/FieldReactSelect.tsx", "../src/components/ui/controls/AppSelectControl.tsx", "../src/components/ui/fields/Select/Select.tsx", "../src/components/ui/icons/fields/IconDropdown.tsx", "../src/components/ui/buttons/RemoveButton/RemoveButton.tsx", "../src/components/ui/icons/fields/IconRemove.tsx", "../src/helpers/transforms.ts"],
  "sourcesContent": ["import * as React from 'react';\nimport './TableFiltersClient.scss';\nimport { FieldArray, FieldArrayRenderProps, Form, Formik, FormikHelpers } from 'formik';\nimport filterSchema from '../../ui/controls/validations';\nimport FiltersRow from '../FiltersRow/FiltersRow';\nimport {\n  FilterResponseItem,\n  InitialUILParseData,\n  InitialValues,\n  InitialValuesItem,\n  LoadOptionsType,\n} from '../../../types/filter';\nimport {\n  fillSavedFilterRowWithExtraData,\n  transformResponseFilters,\n  transformWithoutUselessData,\n} from '../../../helpers/transforms';\n\nexport interface ITableFiltersClient {\n  onLoadSourceOptions: (filterId: string) => LoadOptionsType;\n  onSubmitFilterForm: (outputData: InitialUILParseData) => void;\n  onRemoveFilter?: (index: number) => void;\n  onAddFilter?: (fieldArrayProps: FieldArrayRenderProps) => void;\n  initialFilters: InitialUILParseData; // InitialValues;\n  filtersTypesList: Array<FilterResponseItem>; // Array<FilterTransformedItem>;\n  addFilterButtonText: string;\n  submitFilterButtonText: string;\n  idLabelText?: string;\n  operatorLabelText?: string;\n  valuesLabelText?: string;\n}\n\nconst TableFiltersClient: React.FC<ITableFiltersClient> = (props) => {\n  const {\n    onSubmitFilterForm,\n    initialFilters,\n    filtersTypesList,\n    onRemoveFilter,\n    onAddFilter,\n    onLoadSourceOptions,\n    addFilterButtonText,\n    submitFilterButtonText,\n    idLabelText,\n    operatorLabelText,\n    valuesLabelText,\n  } = props;\n\n  // transform server data\n  const transformed = transformResponseFilters(filtersTypesList);\n\n  // for each saved filter add extra info {type, values, options }\n  const initialValue = fillSavedFilterRowWithExtraData(initialFilters, transformed);\n\n  const submitForm = (values: InitialValues, helpers: FormikHelpers<InitialValues>) => {\n    // extract useless data\n    const outputData = transformWithoutUselessData(values);\n\n    if (onSubmitFilterForm) {\n      onSubmitFilterForm(outputData);\n    }\n  };\n\n  return (\n    <Formik onSubmit={submitForm} initialValues={initialValue} validationSchema={filterSchema} enableReinitialize>\n      <Form>\n        <FieldArray name=\"filters\">\n          {(fieldArrayProps) => {\n            const { form, push, remove } = fieldArrayProps;\n            const { filters } = form.values;\n\n            const onRemove = (index: number) => {\n              remove(index);\n\n              // for interface\n              if (onRemoveFilter) {\n                onRemoveFilter(index);\n              }\n            };\n\n            const addFilter = () => {\n              const [firstItem = null] = transformed;\n\n              push({\n                id: firstItem,\n                operator: '',\n                values: [],\n              });\n\n              // for interface\n              if (onAddFilter) {\n                onAddFilter(fieldArrayProps);\n              }\n            };\n\n            return (\n              <div className=\"filter-list\">\n                <div className=\"filter-list-labels\">\n                  <label>{idLabelText}</label>\n                  <label>{operatorLabelText}</label>\n                  <label>{valuesLabelText}</label>\n                </div>\n                <ul className=\"filter-list__items\">\n                  {filters.map((row: InitialValuesItem, index: number) => {\n                    // clear operator's select and values select\n                    const onChangeIdSelect = () => {\n                      form.setFieldValue(`filters[${index}].operator`, '');\n                      form.setFieldValue(`filters[${index}].values`, null);\n                    };\n\n                    return (\n                      <li className=\"filter-list__item\" key={index}>\n                        <FiltersRow\n                          loadOptions={onLoadSourceOptions(row?.id?.value)}\n                          filterType={row?.id?.type}\n                          onChangeIdSelect={onChangeIdSelect}\n                          idOptions={transformed}\n                          operatorOptions={row?.id?.operators}\n                          valueOptions={row?.id?.values}\n                          onRemove={onRemove}\n                          index={index}\n                        />\n                      </li>\n                    );\n                  })}\n                </ul>\n\n                <div className=\"filter-list__button\">\n                  <button type=\"button\" onClick={addFilter}>\n                    {addFilterButtonText}\n                  </button>\n                </div>\n              </div>\n            );\n          }}\n        </FieldArray>\n        <div className=\"filter-list-submit\">\n          <button type=\"submit\">{submitFilterButtonText}</button>\n        </div>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default TableFiltersClient;\n", "import * as Yup from 'yup';\nimport { FilterTransformedItem, ReactSelectOption } from '../../../types/filter';\n\nconst arrayOfObjectsToArrayOfStrings = (value: Array<ReactSelectOption>) => {\n  return value?.map((item) => item.value);\n};\n\nconst messages = {\n  required: 'Required',\n  date: 'Should be valid date format',\n  string: 'Should be valid string',\n  number: 'Should be valid number',\n};\n\nconst filterSchema = Yup.object().shape({\n  filters: Yup.array().of(\n    Yup.object().shape({\n      id: Yup.object()\n        .shape({\n          label: Yup.string().required(),\n          value: Yup.string().required(),\n          type: Yup.string().required(),\n        })\n        .nullable()\n        .required(messages.required),\n      values: Yup.array()\n        .when('id', {\n          is: (object: FilterTransformedItem) => {\n            if (object && object.type) {\n              return object.type === 'number';\n            }\n            return false;\n          },\n          then: Yup.array()\n            .transform((value: Array<ReactSelectOption>) => arrayOfObjectsToArrayOfStrings(value))\n            .of(Yup.number().typeError(messages.number))\n            .required(messages.required),\n        })\n        .when('id', {\n          is: (object: FilterTransformedItem) => {\n            if (object && object.type) {\n              return object.type === 'date';\n            }\n            return false;\n          },\n          then: Yup.array()\n            .transform((value: Array<ReactSelectOption>) => arrayOfObjectsToArrayOfStrings(value))\n            .of(Yup.date().typeError(messages.date))\n            .required(messages.required),\n        })\n        .when('id', {\n          is: (object: FilterTransformedItem) => {\n            if (object && object.type) {\n              return object.type !== 'date' && object.type !== 'number';\n            }\n            return false;\n          },\n          then: Yup.array()\n            .transform((value: Array<ReactSelectOption>) => arrayOfObjectsToArrayOfStrings(value))\n            .of(Yup.number().typeError(messages.string))\n            .required(messages.required),\n        }),\n\n      operator: Yup.string().nullable().required(messages.required), // these constraints take precedence\n    })\n  ),\n  // .required('\u0414\u043E\u0431\u0430\u0432\u0442\u0435 \u0444\u0456\u043B\u044C\u0442\u0440') // these constraints are shown if and only if inner constraints are satisfied\n  // .min(3, '\u041C\u0456\u043D\u0456\u043C\u0430\u043B\u044C\u043D\u0430 \u043A\u0456\u043B\u044C\u043A\u0456\u0441\u0442\u044C \u0444\u0456\u043B\u044C\u0442\u0440\u0456\u0432 - 3'),\n});\n\nexport default filterSchema;\n", "import * as React from 'react';\nimport { FilterType, LoadOptionsType, OperatorOptions, ReactSelectOption } from '../../../types/filter';\nimport FilterSwitchValueField from '../FilterSwitchValueField/FilterSwitchValueField';\nimport AppReactSelectControl from '../../ui/controls/AppReactSelectControl';\nimport AppSelectControl from '../../ui/controls/AppSelectControl';\nimport RemoveButton from '../../ui/buttons/RemoveButton/RemoveButton';\n\nexport interface IFiltersRow {\n  loadOptions: LoadOptionsType;\n  idOptions: Array<ReactSelectOption>;\n  operatorOptions: OperatorOptions;\n  valueOptions: Array<ReactSelectOption> | null;\n  onRemove: (index: number) => void;\n  onChangeIdSelect: (value: any) => void;\n  index: number;\n  filterType: FilterType;\n}\n\nconst FiltersRow: React.FC<IFiltersRow> = (props) => {\n  const { idOptions, loadOptions, operatorOptions, filterType, valueOptions, onRemove, onChangeIdSelect, index } = props;\n\n  return (\n    <div className=\"filter-row\">\n      <div className=\"filter-row__field filter-row__field__id\">\n        <AppReactSelectControl classNamePrefix=\"select-id\" name={`filters[${index}].id`} options={idOptions} onChange={onChangeIdSelect} />\n      </div>\n      <div className=\"filter-row__field filter-row__field__operator\">\n        <AppSelectControl className=\"select-operator\" name={`filters[${index}].operator`} options={operatorOptions} />\n      </div>\n      <div className=\"filter-row__field filter-row__field__values\">\n        <FilterSwitchValueField\n          classNamePrefix=\"select-values\"\n          name={`filters[${index}].values`}\n          type={filterType}\n          valueOptions={valueOptions}\n          loadOptions={loadOptions}\n        />\n      </div>\n\n      <div className=\"filter-row__field filter-row__remove\">\n        <RemoveButton onClick={() => onRemove(index)} />\n      </div>\n    </div>\n  );\n};\nexport default FiltersRow;\n", "import * as React from 'react';\nimport { TYPE_BOOLEAN, TYPE_DATE, TYPE_ENUM, TYPE_NUMBER, TYPE_SOURCE, TYPE_STRING } from '../../../const/filters-const';\nimport AppReactSelectPaginateControl from '../../ui/controls/AppReactSelectPaginateControl';\nimport AppReactSelectControl from '../../ui/controls/AppReactSelectControl';\nimport { FilterType, LoadOptionsType, ReactSelectOption } from '../../../types/filter';\n\nexport interface FilterSwitchValueFieldProps {\n  type: FilterType;\n  name: string;\n  valueOptions: Array<ReactSelectOption> | null;\n  loadOptions: LoadOptionsType;\n  classNamePrefix?: string;\n}\n\nconst FilterSwitchValueField: React.FC<FilterSwitchValueFieldProps> = ({\n  type,\n  name,\n  valueOptions,\n  loadOptions,\n  classNamePrefix,\n}) => {\n  switch (type) {\n    case TYPE_SOURCE:\n      return <AppReactSelectPaginateControl name={name} isMulti loadOptions={loadOptions} classNamePrefix={classNamePrefix} />;\n    case TYPE_STRING || TYPE_BOOLEAN || TYPE_DATE || TYPE_ENUM || TYPE_NUMBER:\n      return <AppReactSelectControl name={name} isMulti classNamePrefix={classNamePrefix} />;\n    case TYPE_ENUM:\n      return <AppReactSelectControl name={name} options={valueOptions} isMulti classNamePrefix={classNamePrefix} />;\n    default:\n      return <AppReactSelectControl name={name} isMulti classNamePrefix={classNamePrefix} />;\n  }\n};\n\nexport default FilterSwitchValueField;\n", "export const TYPE_NUMBER = 'number';\nexport const TYPE_STRING = 'string';\nexport const TYPE_BOOLEAN = 'boolean';\nexport const TYPE_DATE = 'date';\nexport const TYPE_ENUM = 'enum';\nexport const TYPE_SOURCE = 'source';", "import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport ControlLayout from './components/LayoutControl/LayoutControl';\n// eslint-disable-next-line import/no-named-as-default\nimport FieldReactSelectPaginate from '../fields/FieldReactSelectPaginate/FieldReactSelectPaginate';\nimport { AsyncPaginateType } from '../../../types/filter';\n\nexport interface IAppReactSelectPaginateControl extends AsyncPaginateType {\n  onChange?: (value: any) => void;\n  name: string;\n  label?: string;\n}\n\nconst AppReactSelectPaginateControl: React.FC<IAppReactSelectPaginateControl> = (props) => {\n  const { name, label, onChange, ...rest } = props;\n\n  return (\n    <Field name={name}>\n      {(propsField: FieldProps) => {\n        const { field, meta, form } = propsField;\n        const isError = meta.touched && !!meta.error;\n\n        return (\n          <ControlLayout isError={isError} error={meta.error} label={label}>\n            <FieldReactSelectPaginate\n              {...rest}\n              {...field}\n              onBlur={() => form.setFieldTouched(name, true)}\n              onChange={(value: any) => {\n                if (onChange) onChange(value);\n                form.setFieldValue(name, value);\n              }}\n            />\n          </ControlLayout>\n        );\n      }}\n    </Field>\n  );\n};\n\nexport default AppReactSelectPaginateControl;\n", "import * as React from 'react';\nimport './LayoutControl.scss';\nimport classNames from 'classnames';\nimport IconImportant from '../../../icons/fields/IconImportant';\n\ninterface IProps {\n  isError?: boolean;\n  error?: string;\n  label?: string;\n  children: React.ReactNode;\n}\n\nconst ControlLayout: React.FC<IProps> = (props) => {\n  const { children, label = '', isError, error } = props;\n  const classes = classNames('field-control', { isError });\n\n  return (\n    <div className={classes}>\n      {label && <label>{label}</label>}\n      <div className=\"field-control__field\">{children}</div>\n      <span className=\"field-control__error\">\n        {isError && (\n          <span>\n            <IconImportant />\n            {error}\n          </span>\n        )}\n      </span>\n    </div>\n  );\n};\n\nexport default ControlLayout;\n", "import * as React from 'react';\n\nconst IconImportant = () => {\n  return (\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"16\" height=\"16\" fill=\"white\" fillOpacity=\"0.01\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M8.5109 2.65516C8.67288 2.72228 8.82004 2.82065 8.94399 2.94466L13.056 7.05599C13.1801 7.17995 13.2786 7.32716 13.3457 7.48919C13.4129 7.65123 13.4475 7.82492 13.4475 8.00033C13.4475 8.17574 13.4129 8.34943 13.3457 8.51146C13.2786 8.6735 13.1801 8.8207 13.056 8.94466L8.94399 13.056C8.82004 13.18 8.67288 13.2784 8.5109 13.3455C8.34893 13.4126 8.17532 13.4472 7.99999 13.4472C7.82466 13.4472 7.65104 13.4126 7.48907 13.3455C7.3271 13.2784 7.17993 13.18 7.05599 13.056L2.94399 8.94466C2.81988 8.8207 2.72142 8.6735 2.65424 8.51146C2.58707 8.34943 2.55249 8.17574 2.55249 8.00033C2.55249 7.82492 2.58707 7.65123 2.65424 7.48919C2.72142 7.32716 2.81988 7.17995 2.94399 7.05599L7.05599 2.94466C7.17993 2.82065 7.3271 2.72228 7.48907 2.65516C7.65104 2.58804 7.82466 2.5535 7.99999 2.5535C8.17532 2.5535 8.34893 2.58804 8.5109 2.65516ZM7.52858 9.13806C7.6536 9.26308 7.82317 9.33332 7.99998 9.33332C8.1768 9.33332 8.34636 9.26308 8.47139 9.13806C8.59641 9.01304 8.66665 8.84347 8.66665 8.66666V5.33332C8.66665 5.15651 8.59641 4.98694 8.47139 4.86192C8.34636 4.73689 8.1768 4.66666 7.99998 4.66666C7.82317 4.66666 7.6536 4.73689 7.52858 4.86192C7.40356 4.98694 7.33332 5.15651 7.33332 5.33332V8.66666C7.33332 8.84347 7.40356 9.01304 7.52858 9.13806ZM7.52858 11.1381C7.6536 11.2631 7.82317 11.3333 7.99998 11.3333C8.1768 11.3333 8.34636 11.2631 8.47139 11.1381C8.59641 11.013 8.66665 10.8435 8.66665 10.6667C8.66665 10.4898 8.59641 10.3203 8.47139 10.1953C8.34636 10.0702 8.1768 9.99999 7.99998 9.99999C7.82317 9.99999 7.6536 10.0702 7.52858 10.1953C7.40356 10.3203 7.33332 10.4898 7.33332 10.6667C7.33332 10.8435 7.40356 11.013 7.52858 11.1381Z\"\n        fill=\"#DE350B\"\n      />\n    </svg>\n  );\n};\n\nexport default IconImportant;\n", "import * as React from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { AsyncPaginateType } from '../../../../types/filter';\n\nexport interface Props extends AsyncPaginateType {\n  isError?: boolean;\n}\n\nconst FieldReactSelectPaginate: React.FC<Props> = (props) => {\n  const { ...rest } = props;\n\n  return (\n    <AsyncPaginate\n      additional={{\n        page: 1,\n      }}\n      {...rest}\n    />\n  );\n};\n\nexport default FieldReactSelectPaginate;\n", "import * as React from 'react';\nimport { Props } from 'react-select';\nimport { Field, FieldProps } from 'formik';\nimport FieldReactSelect from '../fields/FieldReactSelect/FieldReactSelect';\nimport ControlLayout from './components/LayoutControl/LayoutControl';\n\nexport interface IAppReactSelectControl extends Props {\n  options?: Array<any> | any;\n  onChange?: (value: any) => void;\n  name: string;\n  label?: string;\n}\n\nconst AppReactSelectControl: React.FC<IAppReactSelectControl> = (props) => {\n  const { name, label, onChange, ...rest } = props;\n\n  return (\n    <Field name={name}>\n      {(propsField: FieldProps) => {\n        const { field, meta, form } = propsField;\n        const isError = meta.touched && !!meta.error;\n\n        return (\n          <ControlLayout isError={isError} error={meta.error} label={label}>\n            <FieldReactSelect\n              {...rest}\n              {...field}\n              onBlur={() => form.setFieldTouched(name, true)}\n              onChange={(value: any) => {\n                if (onChange) onChange(value);\n                form.setFieldValue(name, value);\n              }}\n            />\n          </ControlLayout>\n        );\n      }}\n    </Field>\n  );\n};\n\nexport default AppReactSelectControl;\n", "import * as React from 'react';\nimport { Props } from 'react-select';\nimport Creatable from 'react-select/async-creatable';\n\ninterface PropsType extends Props {\n  isError?: boolean;\n}\n\nconst FieldReactSelect: React.FC<PropsType> = function (props) {\n  const { options, isError, ...rest } = props;\n\n  return <Creatable defaultOptions={options} {...rest} />;\n};\n\nexport default FieldReactSelect;\n", "import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport ControlLayout from './components/LayoutControl/LayoutControl';\nimport Select from '../fields/Select/Select';\n\ntype FormOptionType = {\n  value: string;\n  key: string;\n  disabled?: boolean;\n};\n\nexport interface IAppSelectControl extends React.HTMLProps<HTMLSelectElement> {\n  options: Array<FormOptionType | any>;\n}\n\nconst AppSelectControl: React.FC<IAppSelectControl> = (props) => {\n  const { name, options = [], disabled, label, id, className } = props;\n\n  return (\n    <Field name={name}>\n      {(propsField: FieldProps) => {\n        const { field, meta } = propsField;\n        const isError = meta.touched && !!meta.error;\n\n        return (\n          <ControlLayout isError={isError} error={meta.error} label={label}>\n            <Select id={id} {...field} isError={isError} disabled={disabled} className={className}>\n              {options.map((option: FormOptionType) => (\n                <option key={option.value} value={option.value}>\n                  {option.key}\n                </option>\n              ))}\n            </Select>\n          </ControlLayout>\n        );\n      }}\n    </Field>\n  );\n};\n\nexport default AppSelectControl;\n", "import React, { FC, ReactNode, SelectHTMLAttributes } from 'react';\nimport classNames from 'classnames';\nimport IconDropdown from '../../icons/fields/IconDropdown';\nimport './Select.scss';\nexport interface ISelect extends SelectHTMLAttributes<any> {\n  isError: boolean;\n  children: ReactNode;\n}\n\nconst Select: FC<ISelect> = (props) => {\n  const { isError, children, className, ...rest } = props;\n  const classes = classNames('field-select', className, { isError });\n\n  return (\n    <div className={classes}>\n      <select autoComplete=\"off\" {...rest}>\n        {children}\n      </select>\n      <IconDropdown />\n    </div>\n  );\n};\n\nexport default Select;\n", "import * as React from 'react';\n\nconst IconDropdown: React.FC = () => {\n  return (\n    <svg height=\"20\" width=\"20\" viewBox=\"0 0 20 20\" aria-hidden=\"true\" focusable=\"false\" className=\"css-tj5bde-Svg\">\n      <path d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\"></path>\n    </svg>\n  );\n};\n\nexport default IconDropdown;\n", "import * as React from 'react';\nimport classNames from 'classnames';\nimport './RemoveButton.scss';\nimport IconRemove from '../../icons/fields/IconRemove';\n\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst RemoveButton: React.FC<ButtonProps> = ({ className = '', ...rest }) => {\n  const classes = classNames('remove-button', classNames);\n  return (\n    <button {...rest} className={classes}>\n      <IconRemove />\n    </button>\n  );\n};\n\nexport default RemoveButton;\n", "import * as React from 'react';\n\nconst IconRemove: React.FC = () => {\n  return (\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M18.222 7.111H15.111V5.556C15.111 5.1435 14.9472 4.74787 14.6556 4.4561C14.364 4.16432 13.9685 4.00027 13.556 4H10.444C10.0315 4.00027 9.63598 4.16432 9.34439 4.4561C9.0528 4.74787 8.889 5.1435 8.889 5.556V7.111H5.778C5.57166 7.111 5.37377 7.19297 5.22787 7.33887C5.08197 7.48477 5 7.68266 5 7.889C5 8.09534 5.08197 8.29323 5.22787 8.43913C5.37377 8.58503 5.57166 8.667 5.778 8.667H6.486L7.461 19.457C7.4827 19.6964 7.59309 19.9191 7.77051 20.0814C7.94793 20.2436 8.17958 20.3337 8.42 20.334H15.507C15.7677 20.3341 16.0189 20.2366 16.2114 20.0608C16.4038 19.885 16.5235 19.6436 16.547 19.384L17.515 8.668H18.223C18.3252 8.66787 18.4263 8.64761 18.5207 8.6084C18.615 8.56918 18.7007 8.51176 18.7728 8.43942C18.845 8.36709 18.9022 8.28125 18.9412 8.1868C18.9801 8.09236 19.0001 7.99117 19 7.889C19 7.68266 18.918 7.48477 18.7721 7.33887C18.6262 7.19297 18.4283 7.111 18.222 7.111ZM10.444 5.556H13.555V7.111H10.444V5.556ZM15.044 18.778H8.96L8.047 8.667H15.952L15.044 18.778Z\"\n        fill=\"#94A0B5\"\n      />\n    </svg>\n  );\n};\n\nexport default IconRemove;\n", "// transform data for formik\nimport { FilterResponseItem, FilterTransformedItem, InitialUILParseData, InitialValues } from '../types/filter';\n\nexport const fillSavedFilterRowWithExtraData = (\n  initialSavedFilters: InitialUILParseData,\n  filtersData: Array<FilterTransformedItem>\n): InitialValues => {\n  const inputFilterItems = initialSavedFilters.filters?.length\n    ? initialSavedFilters.filters.map((initial) => {\n        const row = filtersData.find((item) => initial.id.value === item.value);\n\n        return {\n          values: initial.values, // || [],\n          operator: initial.operator,\n          id: row as FilterTransformedItem,\n        };\n      })\n    : [];\n\n  return {\n    filters: inputFilterItems,\n  };\n};\n\nexport const transformResponseFilters = (filters: Array<FilterResponseItem>): Array<FilterTransformedItem> => {\n  return filters.map((item) => {\n    const { caption, id, values, operators, ...rest } = item;\n\n    // \u044F\u043A\u0449\u043E \u0456\u0441\u043D\u0443\u0454 \u043C\u0430\u0441\u0438\u0432 \u0442\u043E\u0434\u0456 \u0440\u043E\u0431\u0438\u043C\u043E \u0434\u043B\u044F \u043D\u044C\u043E\u0433\u043E \u043F\u043E\u0442\u0440\u0456\u0431\u043D\u0438\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u0434\u043B\u044F \u0437\u0440\u0443\u0447\u043D\u0456\u0448\u043E\u0457 \u0440\u043E\u0431\u043E\u0442\u0438 \u0437 react-select\n    let transformedValue;\n    if (Array.isArray(values)) {\n      transformedValue = values.map((val) => {\n        return {\n          label: val.name,\n          value: String(val.id),\n        };\n      });\n    } else {\n      transformedValue = values;\n    }\n\n    // \u0434\u043B\u044F \u0437\u0440\u0443\u0447\u043D\u043E\u0457 \u0440\u043E\u0431\u043E\u0442\u0438 \u0437 select (formik control wrapper)\n    const transformedOperators = operators.map((operator: string) => ({ key: operator, value: operator }));\n\n    return {\n      label: caption,\n      value: String(id),\n      values: transformedValue,\n      operators: [{ key: '\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044C \u043E\u043F\u0435\u0440\u0430\u0442\u043E\u0440', value: '' }, ...transformedOperators],\n      ...rest,\n    };\n  }) as Array<FilterTransformedItem>;\n};\n\nexport const transformWithoutUselessData = (formikData: InitialValues): InitialUILParseData => {\n  const forSerialization = formikData.filters.map((item) => {\n    const { id, ...rest } = item;\n\n    return {\n      ...rest,\n      id: {\n        label: id.label,\n        value: id.value,\n      },\n    };\n  });\n\n  const outputData: InitialUILParseData = {\n    filters: forSerialization,\n  };\n\n  return outputData;\n};\n"],
  "mappings": "AAAA,wBAEA,6DCFA,sBAGA,GAAM,GAAiC,AAAC,GAC/B,GAAO,IAAI,AAAC,GAAS,EAAK,KAAK,EAGlC,EAAW,CACf,SAAU,WACV,KAAM,8BACN,OAAQ,yBACR,OAAQ,wBACV,EAEM,GAAe,AAAI,SAAO,EAAE,MAAM,CACtC,QAAS,AAAI,QAAM,EAAE,GACnB,AAAI,SAAO,EAAE,MAAM,CACjB,GAAI,AAAI,SAAO,EACZ,MAAM,CACL,MAAO,AAAI,SAAO,EAAE,SAAS,EAC7B,MAAO,AAAI,SAAO,EAAE,SAAS,EAC7B,KAAM,AAAI,SAAO,EAAE,SAAS,CAC9B,CAAC,EACA,SAAS,EACT,SAAS,EAAS,QAAQ,EAC7B,OAAQ,AAAI,QAAM,EACf,KAAK,KAAM,CACV,GAAI,AAAC,GACC,GAAU,EAAO,KACZ,EAAO,OAAS,SAElB,GAET,KAAM,AAAI,QAAM,EACb,UAAU,AAAC,GAAoC,EAA+B,CAAK,CAAC,EACpF,GAAG,AAAI,SAAO,EAAE,UAAU,EAAS,MAAM,CAAC,EAC1C,SAAS,EAAS,QAAQ,CAC/B,CAAC,EACA,KAAK,KAAM,CACV,GAAI,AAAC,GACC,GAAU,EAAO,KACZ,EAAO,OAAS,OAElB,GAET,KAAM,AAAI,QAAM,EACb,UAAU,AAAC,GAAoC,EAA+B,CAAK,CAAC,EACpF,GAAG,AAAI,OAAK,EAAE,UAAU,EAAS,IAAI,CAAC,EACtC,SAAS,EAAS,QAAQ,CAC/B,CAAC,EACA,KAAK,KAAM,CACV,GAAI,AAAC,GACC,GAAU,EAAO,KACZ,EAAO,OAAS,QAAU,EAAO,OAAS,SAE5C,GAET,KAAM,AAAI,QAAM,EACb,UAAU,AAAC,GAAoC,EAA+B,CAAK,CAAC,EACpF,GAAG,AAAI,SAAO,EAAE,UAAU,EAAS,MAAM,CAAC,EAC1C,SAAS,EAAS,QAAQ,CAC/B,CAAC,EAEH,SAAU,AAAI,SAAO,EAAE,SAAS,EAAE,SAAS,EAAS,QAAQ,CAC9D,CAAC,CACH,CAGF,CAAC,EAEM,EAAQ,GCtEf,wBCAA,wBCAO,GAAM,GAAc,SACd,EAAc,SACd,EAAe,UACf,EAAY,OACZ,EAAY,OACZ,EAAc,SCL3B,wBACA,gCCDA,wBAEA,2BCFA,wBAEA,GAAM,IAAgB,IAElB,gBAAC,OAAI,MAAM,KAAK,OAAO,KAAK,QAAQ,YAAY,KAAK,OAAO,MAAM,8BAChE,gBAAC,QAAK,MAAM,KAAK,OAAO,KAAK,KAAK,QAAQ,YAAY,OAAO,EAC7D,gBAAC,QACC,SAAS,UACT,SAAS,UACT,EAAE,wmDACF,KAAK,UACP,CACF,EAIG,EAAQ,GDJf,GAAM,IAAkC,AAAC,GAAU,CACjD,GAAM,CAAE,WAAU,QAAQ,GAAI,UAAS,SAAU,EAC3C,EAAU,GAAW,gBAAiB,CAAE,SAAQ,CAAC,EAEvD,MACE,iBAAC,OAAI,UAAW,GACb,GAAS,gBAAC,aAAO,CAAM,EACxB,gBAAC,OAAI,UAAU,wBAAwB,CAAS,EAChD,gBAAC,QAAK,UAAU,wBACb,GACC,gBAAC,YACC,gBAAC,MAAc,EACd,CACH,CAEJ,CACF,CAEJ,EAEO,EAAQ,GEhCf,wBACA,6DAOA,GAAM,IAA4C,AAAC,GAAU,CAC3D,GAAM,IAAK,GAAS,EAEpB,MACE,iBAAC,IACC,WAAY,CACV,KAAM,CACR,EACC,GAAG,EACN,CAEJ,EAEO,EAAQ,GHRf,GAAM,IAA0E,AAAC,GAAU,CACzF,GAAM,CAAE,OAAM,QAAO,cAAa,GAAS,EAE3C,MACE,iBAAC,IAAM,KAAM,GACV,AAAC,GAA2B,CAC3B,GAAM,CAAE,QAAO,OAAM,QAAS,EACxB,EAAU,EAAK,SAAW,CAAC,CAAC,EAAK,MAEvC,MACE,iBAAC,GAAc,QAAS,EAAS,MAAO,EAAK,MAAO,MAAO,GACzD,gBAAC,GACE,GAAG,EACH,GAAG,EACJ,OAAQ,IAAM,EAAK,gBAAgB,EAAM,EAAI,EAC7C,SAAU,AAAC,GAAe,CACxB,AAAI,GAAU,EAAS,CAAK,EAC5B,EAAK,cAAc,EAAM,CAAK,CAChC,EACF,CACF,CAEJ,CACF,CAEJ,EAEO,EAAQ,GIxCf,wBAEA,gCCFA,wBAEA,6CAMA,GAAM,IAAwC,SAAU,EAAO,CAC7D,GAAM,CAAE,UAAS,aAAY,GAAS,EAEtC,MAAO,iBAAC,IAAU,eAAgB,EAAU,GAAG,EAAM,CACvD,EAEO,EAAQ,GDDf,GAAM,IAA0D,AAAC,GAAU,CACzE,GAAM,CAAE,OAAM,QAAO,cAAa,GAAS,EAE3C,MACE,iBAAC,IAAM,KAAM,GACV,AAAC,GAA2B,CAC3B,GAAM,CAAE,QAAO,OAAM,QAAS,EACxB,EAAU,EAAK,SAAW,CAAC,CAAC,EAAK,MAEvC,MACE,iBAAC,GAAc,QAAS,EAAS,MAAO,EAAK,MAAO,MAAO,GACzD,gBAAC,GACE,GAAG,EACH,GAAG,EACJ,OAAQ,IAAM,EAAK,gBAAgB,EAAM,EAAI,EAC7C,SAAU,AAAC,GAAe,CACxB,AAAI,GAAU,EAAS,CAAK,EAC5B,EAAK,cAAc,EAAM,CAAK,CAChC,EACF,CACF,CAEJ,CACF,CAEJ,EAEO,EAAQ,GN1Bf,GAAM,IAAgE,CAAC,CACrE,OACA,OACA,eACA,cACA,qBACI,CACJ,OAAQ,OACD,GACH,MAAO,iBAAC,GAA8B,KAAM,EAAM,QAAO,GAAC,YAAa,EAAa,gBAAiB,EAAiB,MACnH,IAAe,GAAgB,GAAa,GAAa,GAC5D,MAAO,iBAAC,GAAsB,KAAM,EAAM,QAAO,GAAC,gBAAiB,EAAiB,MACjF,GACH,MAAO,iBAAC,GAAsB,KAAM,EAAM,QAAS,EAAc,QAAO,GAAC,gBAAiB,EAAiB,UAE3G,MAAO,iBAAC,GAAsB,KAAM,EAAM,QAAO,GAAC,gBAAiB,EAAiB,EAE1F,EAEO,EAAQ,GQjCf,wBACA,gCCDA,qBACA,2BCDA,wBAEA,GAAM,IAAyB,IAE3B,gBAAC,OAAI,OAAO,KAAK,MAAM,KAAK,QAAQ,YAAY,cAAY,OAAO,UAAU,QAAQ,UAAU,kBAC7F,gBAAC,QAAK,EAAE,wRAAwR,CAClS,EAIG,EAAQ,GDDf,GAAM,IAAsB,AAAC,GAAU,CACrC,GAAM,CAAE,UAAS,WAAU,eAAc,GAAS,EAC5C,EAAU,GAAW,eAAgB,EAAW,CAAE,SAAQ,CAAC,EAEjE,MACE,iBAAC,OAAI,UAAW,GACd,gBAAC,UAAO,aAAa,MAAO,GAAG,GAC5B,CACH,EACA,gBAAC,MAAa,CAChB,CAEJ,EAEO,EAAQ,GDRf,GAAM,IAAgD,AAAC,GAAU,CAC/D,GAAM,CAAE,OAAM,UAAU,CAAC,EAAG,WAAU,QAAO,KAAI,aAAc,EAE/D,MACE,iBAAC,IAAM,KAAM,GACV,AAAC,GAA2B,CAC3B,GAAM,CAAE,QAAO,QAAS,EAClB,EAAU,EAAK,SAAW,CAAC,CAAC,EAAK,MAEvC,MACE,iBAAC,GAAc,QAAS,EAAS,MAAO,EAAK,MAAO,MAAO,GACzD,gBAAC,GAAO,GAAI,EAAK,GAAG,EAAO,QAAS,EAAS,SAAU,EAAU,UAAW,GACzE,EAAQ,IAAI,AAAC,GACZ,gBAAC,UAAO,IAAK,EAAO,MAAO,MAAO,EAAO,OACtC,EAAO,GACV,CACD,CACH,CACF,CAEJ,CACF,CAEJ,EAEO,EAAQ,GGxCf,wBACA,0BCDA,wBAEA,GAAM,IAAuB,IAEzB,gBAAC,OAAI,MAAM,KAAK,OAAO,KAAK,QAAQ,YAAY,KAAK,OAAO,MAAM,8BAChE,gBAAC,QACC,EAAE,88BACF,KAAK,UACP,CACF,EAIG,EAAQ,GDNf,GAAM,IAAsC,CAAC,CAAE,YAAY,MAAO,KAAW,CAC3E,GAAM,GAAU,EAAW,gBAAiB,CAAU,EACtD,MACE,iBAAC,UAAQ,GAAG,EAAM,UAAW,GAC3B,gBAAC,MAAW,CACd,CAEJ,EAEO,GAAQ,GZEf,GAAM,IAAoC,AAAC,GAAU,CACnD,GAAM,CAAE,YAAW,cAAa,kBAAiB,aAAY,eAAc,WAAU,mBAAkB,SAAU,EAEjH,MACE,iBAAC,OAAI,UAAU,cACb,gBAAC,OAAI,UAAU,2CACb,gBAAC,GAAsB,gBAAgB,YAAY,KAAM,WAAW,QAAa,QAAS,EAAW,SAAU,EAAkB,CACnI,EACA,gBAAC,OAAI,UAAU,iDACb,gBAAC,GAAiB,UAAU,kBAAkB,KAAM,WAAW,cAAmB,QAAS,EAAiB,CAC9G,EACA,gBAAC,OAAI,UAAU,+CACb,gBAAC,GACC,gBAAgB,gBAChB,KAAM,WAAW,YACjB,KAAM,EACN,aAAc,EACd,YAAa,EACf,CACF,EAEA,gBAAC,OAAI,UAAU,wCACb,gBAAC,IAAa,QAAS,IAAM,EAAS,CAAK,EAAG,CAChD,CACF,CAEJ,EACO,GAAQ,Gc1CR,GAAM,IAAkC,CAC7C,EACA,IAcO,EACL,QAbuB,EAAoB,SAAS,OAClD,EAAoB,QAAQ,IAAI,AAAC,GAAY,CAC3C,GAAM,GAAM,EAAY,KAAK,AAAC,GAAS,EAAQ,GAAG,QAAU,EAAK,KAAK,EAEtE,MAAO,CACL,OAAQ,EAAQ,OAChB,SAAU,EAAQ,SAClB,GAAI,CACN,CACF,CAAC,EACD,CAAC,CAIL,GAGW,GAA2B,AAAC,GAChC,EAAQ,IAAI,AAAC,GAAS,CAC3B,GAAM,CAAE,UAAS,KAAI,SAAQ,eAAc,GAAS,EAGhD,EACJ,AAAI,MAAM,QAAQ,CAAM,EACtB,EAAmB,EAAO,IAAI,AAAC,GACtB,EACL,MAAO,EAAI,KACX,MAAO,OAAO,EAAI,EAAE,CACtB,EACD,EAED,EAAmB,EAIrB,GAAM,GAAuB,EAAU,IAAI,AAAC,GAAsB,EAAE,IAAK,EAAU,MAAO,CAAS,EAAE,EAErG,MAAO,CACL,MAAO,EACP,MAAO,OAAO,CAAE,EAChB,OAAQ,EACR,UAAW,CAAC,CAAE,IAAK,oGAAqB,MAAO,EAAG,EAAG,GAAG,CAAoB,EAC5E,GAAG,CACL,CACF,CAAC,EAGU,GAA8B,AAAC,GAaF,EACtC,QAbuB,EAAW,QAAQ,IAAI,AAAC,GAAS,CACxD,GAAM,CAAE,QAAO,GAAS,EAExB,MAAO,CACL,GAAG,EACH,GAAI,CACF,MAAO,EAAG,MACV,MAAO,EAAG,KACZ,CACF,CACF,CAAC,CAID,GhBrCF,GAAM,IAAoD,AAAC,GAAU,CACnE,GAAM,CACJ,qBACA,iBACA,mBACA,iBACA,cACA,sBACA,sBACA,yBACA,cACA,oBACA,mBACE,EAGE,EAAc,GAAyB,CAAgB,EAGvD,GAAe,GAAgC,EAAgB,CAAW,EAWhF,MACE,iBAAC,IAAO,SAVS,CAAC,EAAuB,IAA0C,CAEnF,GAAM,GAAa,GAA4B,CAAM,EAErD,AAAI,GACF,EAAmB,CAAU,CAEjC,EAGgC,cAAe,GAAc,iBAAkB,EAAc,mBAAkB,IAC3G,gBAAC,QACC,gBAAC,IAAW,KAAK,WACd,AAAC,GAAoB,CACpB,GAAM,CAAE,OAAM,OAAM,WAAW,EACzB,CAAE,YAAY,EAAK,OAEnB,GAAW,AAAC,GAAkB,CAClC,GAAO,CAAK,EAGR,GACF,EAAe,CAAK,CAExB,EAEM,GAAY,IAAM,CACtB,GAAM,CAAC,EAAY,MAAQ,EAE3B,EAAK,CACH,GAAI,EACJ,SAAU,GACV,OAAQ,CAAC,CACX,CAAC,EAGG,GACF,EAAY,CAAe,CAE/B,EAEA,MACE,iBAAC,OAAI,UAAU,eACb,gBAAC,OAAI,UAAU,sBACb,gBAAC,aAAO,CAAY,EACpB,gBAAC,aAAO,CAAkB,EAC1B,gBAAC,aAAO,CAAgB,CAC1B,EACA,gBAAC,MAAG,UAAU,sBACX,GAAQ,IAAI,CAAC,EAAwB,IAAkB,CAEtD,GAAM,IAAmB,IAAM,CAC7B,EAAK,cAAc,WAAW,cAAmB,EAAE,EACnD,EAAK,cAAc,WAAW,YAAiB,IAAI,CACrD,EAEA,MACE,iBAAC,MAAG,UAAU,oBAAoB,IAAK,GACrC,gBAAC,IACC,YAAa,EAAoB,GAAK,IAAI,KAAK,EAC/C,WAAY,GAAK,IAAI,KACrB,iBAAkB,GAClB,UAAW,EACX,gBAAiB,GAAK,IAAI,UAC1B,aAAc,GAAK,IAAI,OACvB,SAAU,GACV,MAAO,EACT,CACF,CAEJ,CAAC,CACH,EAEA,gBAAC,OAAI,UAAU,uBACb,gBAAC,UAAO,KAAK,SAAS,QAAS,IAC5B,CACH,CACF,CACF,CAEJ,CACF,EACA,gBAAC,OAAI,UAAU,sBACb,gBAAC,UAAO,KAAK,UAAU,CAAuB,CAChD,CACF,CACF,CAEJ,EAEO,GAAQ",
  "names": []
}
