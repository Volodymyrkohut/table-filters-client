{
  "version": 3,
  "sources": ["../src/components/filters/TableFiltersClient/TableFiltersClient.tsx", "../src/components/ui/controls/validations.ts", "../src/components/filters/FiltersRow/FiltersRow.tsx", "../src/components/filters/FilterSwitchValueField/FilterSwitchValueField.tsx", "../src/const/filters-const.ts", "../src/components/ui/controls/AppReactSelectPaginateControl.tsx", "../src/components/ui/controls/components/LayoutControl/LayoutControl.tsx", "../src/components/ui/fields/FieldReactSelectPaginate/FieldReactSelectPaginate.tsx", "../src/components/ui/controls/AppReactSelectControl.tsx", "../src/components/ui/fields/FieldReactSelect/FieldReactSelect.tsx", "../src/components/ui/controls/AppSwitcher.tsx", "../src/components/ui/fields/FieldSwitch/FieldSwitch.tsx", "../src/components/ui/controls/AppSelectControl.tsx", "../src/components/ui/fields/Select/Select.tsx", "../src/components/ui/icons/fields/IconDropdown.tsx", "../src/components/ui/buttons/RemoveButton/RemoveButton.tsx", "../src/components/ui/icons/fields/IconRemove.tsx", "../src/helpers/transforms.ts"],
  "sourcesContent": ["import * as React from 'react';\nimport { FC } from \"react\";\nimport { FieldArray, FieldArrayRenderProps, Form, Formik, FormikHelpers } from 'formik';\nimport filterSchema from '../../ui/controls/validations';\nimport FiltersRow from '../FiltersRow/FiltersRow';\nimport {\n  FilterResponseItem,\n  InitialFiltersWithoutExtraData,\n  InitialValues,\n  InitialValuesItem,\n  LoadOptionsType,\n  ValidationMessage,\n} from '../../../types/filter';\nimport {\n  fillSavedFilterRowWithExtraData,\n  transformResponseFilters,\n  transformWithoutUselessData,\n} from '../../../helpers/transforms';\nimport '../../../assets/index.scss';\n\nexport interface ITableFiltersClient {\n  onLoadSourceOptions: (filterId: string) => LoadOptionsType;\n  onSubmitFilterForm: (outputData: InitialFiltersWithoutExtraData) => void;\n  onRemoveFilter?: (index: number) => void;\n  onAddFilter?: (fieldArrayProps: FieldArrayRenderProps) => void;\n  initialFilters: InitialFiltersWithoutExtraData; // InitialValues;\n  filtersTypesList: Array<FilterResponseItem>; // Array<FilterTransformedItem>;\n  addFilterButtonText?: string;\n  submitFilterButtonText?: string;\n  idLabelText?: string;\n  operatorLabelText?: string;\n  valuesLabelText?: string;\n  validationMessages?: ValidationMessage;\n  RemoveFilterButton?: FC;\n  AddFilterButton?: FC;\n  SaveFilterButton?: FC;\n}\n\nconst TableFiltersClient: React.FC<ITableFiltersClient> = (props) => {\n  const {\n    onSubmitFilterForm,\n    initialFilters,\n    filtersTypesList,\n    onRemoveFilter,\n    onAddFilter,\n    onLoadSourceOptions,\n    addFilterButtonText,\n    submitFilterButtonText,\n    idLabelText,\n    operatorLabelText,\n    valuesLabelText,\n    validationMessages,\n    RemoveFilterButton,\n    AddFilterButton,\n    SaveFilterButton,\n  } = props;\n\n  // transform server data\n  const transformed = transformResponseFilters(filtersTypesList);\n\n  // for each saved filter add extra info {type, values, options }\n  const initialValue = fillSavedFilterRowWithExtraData(initialFilters, transformed);\n\n  const submitForm = (values: InitialValues, helpers: FormikHelpers<InitialValues>) => {\n    // extract useless data\n    const outputData = transformWithoutUselessData(values);\n\n    if (onSubmitFilterForm) {\n      onSubmitFilterForm(outputData);\n    }\n  };\n\n  return (\n    <Formik\n      onSubmit={submitForm}\n      initialValues={initialValue}\n      validationSchema={filterSchema(validationMessages)}\n      enableReinitialize\n    >\n      <Form>\n        <FieldArray name=\"filters\">\n          {(fieldArrayProps) => {\n            const { form, push, remove } = fieldArrayProps;\n            const { filters } = form.values;\n\n            const onRemove = (index: number) => {\n              remove(index);\n\n              // for interface\n              if (onRemoveFilter) {\n                onRemoveFilter(index);\n              }\n            };\n\n            const addFilter = () => {\n              const [firstItem = null] = transformed;\n\n              push({\n                id: firstItem,\n                operator: '',\n                values: [],\n              });\n\n              // for interface\n              if (onAddFilter) {\n                onAddFilter(fieldArrayProps);\n              }\n            };\n\n            return (\n              <div className=\"filter-list\">\n                <div className=\"filter-list-labels\">\n                  <label>{idLabelText}</label>\n                  <label>{operatorLabelText}</label>\n                  <label>{valuesLabelText}</label>\n                  <div style={{ width: 36 }}></div>\n                </div>\n                <ul className=\"filter-list__items\">\n                  {filters.map((row: InitialValuesItem, index: number) => {\n                    // clear operator's select and values select\n                    const onChangeField = () => {\n                      form.setFieldValue(`filters[${index}].operator`, '');\n                      form.setFieldValue(`filters[${index}].values`, null);\n                    };\n\n                    return (\n                      <li className=\"filter-list__item\" key={index}>\n                        <FiltersRow\n                          loadOptions={onLoadSourceOptions(row?.id?.value)}\n                          filterType={row?.id?.type}\n                          onChangeField={onChangeField}\n                          options={{\n                            fields: transformed,\n                            operators: row?.id?.operators,\n                            values: row?.id?.values,\n                          }}\n                          onRemove={onRemove}\n                          index={index}\n                          RemoveFilterButton={RemoveFilterButton}\n                        />\n                      </li>\n                    );\n                  })}\n                </ul>\n                <div className=\"button-group\">\n                  <div className=\"filter-list-button\" onClick={addFilter}>\n                    {\n                      AddFilterButton ? <AddFilterButton/> : <button type=\"button\" className=\"filter-list-button__add\">{addFilterButtonText}</button>\n                    }\n                  </div>\n\n                  <div className=\"filter-list-button\">\n                    {SaveFilterButton ? <SaveFilterButton />: <button type=\"submit\" className=\"filter-list-button__save\">{submitFilterButtonText}</button>}\n                  </div>\n                </div>\n              </div>\n            );\n          }}\n        </FieldArray>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default TableFiltersClient;\n", "import * as Yup from 'yup';\nimport { FilterTransformedItem, ReactSelectOption } from '../../../types/filter';\n\nconst arrayOfObjectsToArrayOfStrings = (value: Array<ReactSelectOption>) => {\n  return value?.map((item) => item.value);\n};\n\nconst defaultValidationMessages = {\n  required: 'Required',\n  date: 'Should be valid date format',\n  string: 'Should be valid string',\n  number: 'Should be valid number',\n};\n\nexport default function filterSchemaHOF(validationMessage = defaultValidationMessages) {\n\n    return Yup.object().shape({\n    filters: Yup.array().of(\n      Yup.object().shape({\n        id: Yup.object()\n          .shape({\n            label: Yup.string().required(),\n            value: Yup.string().required(),\n            type: Yup.string().required(),\n          })\n          .nullable()\n          .required(validationMessage.required),\n        // @ts-ignore\n        values: Yup.lazy((values: any, params: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          const type = params && params.parent && params.parent.id && params.parent.id.type ? params.parent.id.type : '';\n\n\n          if (type === 'number') {\n            return Yup.array()\n              .transform((value: Array<ReactSelectOption>) => arrayOfObjectsToArrayOfStrings(value))\n              .of(Yup.number().typeError(validationMessage.number))\n              .required(validationMessage.required);\n          } else if (type === 'date') {\n            return Yup.array()\n              .transform((value: Array<ReactSelectOption>) => arrayOfObjectsToArrayOfStrings(value))\n              .of(Yup.date().typeError(validationMessage.date))\n              .required(validationMessage.required);\n          } else if (type === 'boolean') {\n            return Yup.boolean();\n          } else {\n            return Yup.array()\n              .transform((value: Array<ReactSelectOption>) => arrayOfObjectsToArrayOfStrings(value))\n              .of(Yup.number().typeError(validationMessage.string))\n              .required(validationMessage.required);\n          }\n        }),\n\n        operator: Yup.string().nullable().required(validationMessage.required), // these constraints take precedence\n      })\n    ),\n  });\n}\n", "import * as React from 'react';\nimport { FilterType, LoadOptionsType, OperatorOptions, ReactSelectOption } from '../../../types/filter';\nimport FilterSwitchValueField from '../FilterSwitchValueField/FilterSwitchValueField';\nimport AppReactSelectControl from '../../ui/controls/AppReactSelectControl';\nimport AppSelectControl from '../../ui/controls/AppSelectControl';\nimport RemoveButton from '../../ui/buttons/RemoveButton/RemoveButton';\nimport {FC} from \"react\";\n\nexport interface IFiltersRow {\n  loadOptions: LoadOptionsType;\n  // idOptions: Array<ReactSelectOption>;\n  // operatorOptions: OperatorOptions;\n  // valueOptions: Array<ReactSelectOption> | null;\n  onRemove: (index: number) => void;\n  onChangeField: (value: any) => void;\n  index: number;\n  filterType: FilterType;\n  options: {\n    fields: Array<ReactSelectOption>;\n    operators: OperatorOptions;\n    values: Array<ReactSelectOption> | null;\n  };\n    RemoveFilterButton?: FC;\n}\n\nconst FiltersRow: React.FC<IFiltersRow> = (props) => {\n  const { loadOptions, filterType, onRemove, onChangeField, index, options, RemoveFilterButton } = props;\n\n  return (\n    <div className=\"filter-row\">\n      <div className=\"filter-row__field filter-row__field__id\">\n        <AppReactSelectControl classNamePrefix=\"select-id\" name={`filters[${index}].id`} options={options.fields} onChange={onChangeField} />\n      </div>\n      <div className=\"filter-row__field filter-row__field__operator\">\n        <AppSelectControl className=\"select-operator\" name={`filters[${index}].operator`} options={options.operators} />\n      </div>\n      <div className=\"filter-row__field filter-row__field__values\">\n        <FilterSwitchValueField\n          classNamePrefix=\"select-values\"\n          name={`filters[${index}].values`}\n          type={filterType}\n          valueOptions={options.values}\n          loadOptions={loadOptions}\n        />\n      </div>\n\n      <div className=\"filter-row__field filter-row__remove\" onClick={() => onRemove(index)}>\n        {RemoveFilterButton ? <RemoveFilterButton /> : <RemoveButton />}\n      </div>\n    </div>\n  );\n};\nexport default FiltersRow;\n", "import * as React from 'react';\nimport { TYPE_BOOLEAN, TYPE_DATE, TYPE_ENUM, TYPE_NUMBER, TYPE_SOURCE, TYPE_STRING } from '../../../const/filters-const';\nimport AppReactSelectPaginateControl from '../../ui/controls/AppReactSelectPaginateControl';\nimport AppReactSelectControl from '../../ui/controls/AppReactSelectControl';\nimport { FilterType, LoadOptionsType, ReactSelectOption } from '../../../types/filter';\nimport AppSwitcher from '../../ui/controls/AppSwitcher';\n\nexport interface FilterSwitchValueFieldProps {\n  type: FilterType;\n  name: string;\n  valueOptions: Array<ReactSelectOption> | null;\n  loadOptions: LoadOptionsType;\n  classNamePrefix?: string;\n}\n\nconst FilterSwitchValueField: React.FC<FilterSwitchValueFieldProps> = ({\n  type,\n  name,\n  valueOptions,\n  loadOptions,\n  classNamePrefix,\n}) => {\n  switch (type) {\n    case TYPE_SOURCE:\n      return (\n        <AppReactSelectPaginateControl\n          name={name}\n          isMulti\n          loadOptions={loadOptions}\n          classNamePrefix={classNamePrefix}\n          placeholder=\"\"\n        />\n      );\n    case TYPE_BOOLEAN:\n      return <AppSwitcher name={name} placeholder=\"\" />;\n    case TYPE_STRING || TYPE_DATE || TYPE_ENUM || TYPE_NUMBER:\n      return <AppReactSelectControl name={name} isMulti classNamePrefix={classNamePrefix} placeholder=\"\" />;\n    case TYPE_ENUM:\n      return (\n        <AppReactSelectControl name={name} options={valueOptions} isMulti classNamePrefix={classNamePrefix} placeholder=\"\" />\n      );\n    default:\n      return <AppReactSelectControl name={name} isMulti classNamePrefix={classNamePrefix} placeholder=\"\" />;\n  }\n};\n\nexport default FilterSwitchValueField;\n", "export const TYPE_NUMBER = 'number';\nexport const TYPE_STRING = 'string';\nexport const TYPE_BOOLEAN = 'boolean';\nexport const TYPE_DATE = 'date';\nexport const TYPE_ENUM = 'enum';\nexport const TYPE_SOURCE = 'source';", "import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport ControlLayout from './components/LayoutControl/LayoutControl';\n// eslint-disable-next-line import/no-named-as-default\nimport FieldReactSelectPaginate from '../fields/FieldReactSelectPaginate/FieldReactSelectPaginate';\nimport { AsyncPaginateType } from '../../../types/filter';\n\nexport interface IAppReactSelectPaginateControl extends AsyncPaginateType {\n  onChange?: (value: any) => void;\n  name: string;\n  label?: string;\n}\n\nconst AppReactSelectPaginateControl: React.FC<IAppReactSelectPaginateControl> = (props) => {\n  const { name, label, onChange, ...rest } = props;\n\n  return (\n    <Field name={name}>\n      {(propsField: FieldProps) => {\n        const { field, meta, form } = propsField;\n        const isError = meta.touched && !!meta.error;\n\n        return (\n          <ControlLayout isError={isError} error={meta.error} label={label}>\n            <FieldReactSelectPaginate\n              {...rest}\n              {...field}\n              onBlur={() => form.setFieldTouched(name, true)}\n              onChange={(value: any) => {\n                if (onChange) onChange(value);\n                form.setFieldValue(name, value);\n              }}\n            />\n          </ControlLayout>\n        );\n      }}\n    </Field>\n  );\n};\n\nexport default AppReactSelectPaginateControl;\n", "import * as React from 'react';\nimport './LayoutControl.scss';\nimport classNames from 'classnames';\nimport IconImportant from '../../../icons/fields/IconImportant';\n\ninterface IProps {\n  isError?: boolean;\n  error?: string;\n  label?: string;\n  children: React.ReactNode;\n}\n\nconst ControlLayout: React.FC<IProps> = (props) => {\n  const { children, label = '', isError, error } = props;\n  const classes = classNames('filter-field-control', { isError });\n\n  return (\n    <div className={classes}>\n      {label && <label>{label}</label>}\n      <div className=\"filter-field-control__field\">{children}</div>\n      <span className=\"filter-field-control__error\">\n        {isError && (\n          <span>\n            {/*<IconImportant />*/}\n            {error}\n          </span>\n        )}\n      </span>\n    </div>\n  );\n};\n\nexport default ControlLayout;\n", "import * as React from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { AsyncPaginateType } from '../../../../types/filter';\n\nexport interface Props extends AsyncPaginateType {\n  isError?: boolean;\n}\n\nconst FieldReactSelectPaginate: React.FC<Props> = (props) => {\n  const { ...rest } = props;\n\n  return (\n    <AsyncPaginate\n      additional={{\n        page: 1,\n      }}\n      {...rest}\n    />\n  );\n};\n\nexport default FieldReactSelectPaginate;\n", "import * as React from 'react';\nimport { Props } from 'react-select';\nimport { Field, FieldProps } from 'formik';\nimport FieldReactSelect from '../fields/FieldReactSelect/FieldReactSelect';\nimport ControlLayout from './components/LayoutControl/LayoutControl';\n\nexport interface IAppReactSelectControl extends Props {\n  options?: Array<any> | any;\n  onChange?: (value: any) => void;\n  name: string;\n  label?: string;\n}\n\nconst AppReactSelectControl: React.FC<IAppReactSelectControl> = (props) => {\n  const { name, label, onChange, ...rest } = props;\n\n  return (\n    <Field name={name}>\n      {(propsField: FieldProps) => {\n        const { field, meta, form } = propsField;\n        const isError = meta.touched && !!meta.error;\n\n        return (\n          <ControlLayout isError={isError} error={meta.error} label={label}>\n            <FieldReactSelect\n              {...rest}\n              {...field}\n              onBlur={() => form.setFieldTouched(name, true)}\n              onChange={(value: any) => {\n                if (onChange) onChange(value);\n                form.setFieldValue(name, value);\n              }}\n            />\n          </ControlLayout>\n        );\n      }}\n    </Field>\n  );\n};\n\nexport default AppReactSelectControl;\n", "import * as React from 'react';\nimport { Props } from 'react-select';\nimport Creatable from 'react-select/async-creatable';\n\ninterface PropsType extends Props {\n  isError?: boolean;\n}\n\nconst FieldReactSelect: React.FC<PropsType> = function (props) {\n  const { options, isError, ...rest } = props;\n\n  return <Creatable defaultOptions={options} {...rest} />;\n};\n\nexport default FieldReactSelect;\n", "import React, { FC, HTMLProps } from 'react';\nimport { Field, FieldProps } from 'formik';\nimport ControlLayout from './components/LayoutControl/LayoutControl';\nimport FieldSwitch from '../fields/FieldSwitch/FieldSwitch';\n\ninterface Props extends HTMLProps<HTMLInputElement> {\n  isError?: boolean;\n  label?: string;\n}\n\nconst AppSwitcher: FC<Props> = (props) => {\n  const { name, label, ...rest } = props;\n\n  return (\n    <Field name={name}>\n      {(propsField: FieldProps) => {\n        const { field, meta } = propsField;\n        const isError: boolean = meta.touched && !!meta.error;\n\n        return (\n          <ControlLayout isError={isError} error={meta.error} label={label}>\n            <div className=\"app-switcher\">\n              <FieldSwitch isError={isError} {...rest} {...field} checked={field.value} />\n                {field.value ? 'On' : 'Off'}\n            </div>\n          </ControlLayout>\n        );\n      }}\n    </Field>\n  );\n};\n\nexport default AppSwitcher;\n", "import React, { FC, InputHTMLAttributes } from 'react';\nimport './FieldSwitch.scss';\n\ninterface Props extends InputHTMLAttributes<HTMLInputElement> {\n  isError?: boolean;\n}\n\nconst FieldSwitch: FC<Props> = (props) => {\n  const { isError, ...rest } = props;\n  return (\n    <label className={`field-switch ${isError ? 'isError' : ''}`}>\n      <input type=\"checkbox\" className=\"field-switch__input\" {...rest}/>\n      <span className=\"field-switch__slider field-switch__slider--round\"></span>\n    </label>\n  );\n};\n\nexport default FieldSwitch;", "import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport ControlLayout from './components/LayoutControl/LayoutControl';\nimport Select from '../fields/Select/Select';\n\ntype FormOptionType = {\n  value: string;\n  key: string;\n  disabled?: boolean;\n};\n\nexport interface IAppSelectControl extends React.HTMLProps<HTMLSelectElement> {\n  options: Array<FormOptionType | any>;\n}\n\nconst AppSelectControl: React.FC<IAppSelectControl> = (props) => {\n  const { name, options = [], disabled, label, id, className } = props;\n\n  return (\n    <Field name={name}>\n      {(propsField: FieldProps) => {\n        const { field, meta } = propsField;\n        const isError = meta.touched && !!meta.error;\n\n        return (\n          <ControlLayout isError={isError} error={meta.error} label={label}>\n            <Select id={id} {...field} isError={isError} disabled={disabled} className={className}>\n              {options.map((option: FormOptionType) => (\n                <option key={option.value} value={option.value}>\n                  {option.key}\n                </option>\n              ))}\n            </Select>\n          </ControlLayout>\n        );\n      }}\n    </Field>\n  );\n};\n\nexport default AppSelectControl;\n", "import React, { FC, ReactNode, SelectHTMLAttributes } from 'react';\nimport classNames from 'classnames';\nimport IconDropdown from '../../icons/fields/IconDropdown';\nimport './Select.scss';\nexport interface ISelect extends SelectHTMLAttributes<any> {\n  isError: boolean;\n  children: ReactNode;\n}\n\nconst Select: FC<ISelect> = (props) => {\n  const { isError, children, className, ...rest } = props;\n  const classes = classNames('field-select', className, { isError });\n\n  return (\n    <div className={classes}>\n      <select autoComplete=\"off\" {...rest}>\n        {children}\n      </select>\n      <IconDropdown />\n    </div>\n  );\n};\n\nexport default Select;\n", "import * as React from 'react';\n\nconst IconDropdown: React.FC = () => {\n  return (\n    <svg height=\"20\" width=\"20\" viewBox=\"0 0 20 20\" aria-hidden=\"true\" focusable=\"false\" className=\"css-tj5bde-Svg\">\n      <path d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\"></path>\n    </svg>\n  );\n};\n\nexport default IconDropdown;\n", "import * as React from 'react';\nimport classNames from 'classnames';\nimport './RemoveButton.scss';\nimport IconRemove from '../../icons/fields/IconRemove';\n\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst RemoveButton: React.FC<ButtonProps> = ({ className = '', ...rest }) => {\n  const classes = classNames('remove-button', classNames);\n  return (\n    <button {...rest} className={classes} type=\"button\">\n      <IconRemove />\n    </button>\n  );\n};\n\nexport default RemoveButton;\n", "import * as React from 'react';\n\nconst IconRemove: React.FC = () => {\n  return (\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M18.222 7.111H15.111V5.556C15.111 5.1435 14.9472 4.74787 14.6556 4.4561C14.364 4.16432 13.9685 4.00027 13.556 4H10.444C10.0315 4.00027 9.63598 4.16432 9.34439 4.4561C9.0528 4.74787 8.889 5.1435 8.889 5.556V7.111H5.778C5.57166 7.111 5.37377 7.19297 5.22787 7.33887C5.08197 7.48477 5 7.68266 5 7.889C5 8.09534 5.08197 8.29323 5.22787 8.43913C5.37377 8.58503 5.57166 8.667 5.778 8.667H6.486L7.461 19.457C7.4827 19.6964 7.59309 19.9191 7.77051 20.0814C7.94793 20.2436 8.17958 20.3337 8.42 20.334H15.507C15.7677 20.3341 16.0189 20.2366 16.2114 20.0608C16.4038 19.885 16.5235 19.6436 16.547 19.384L17.515 8.668H18.223C18.3252 8.66787 18.4263 8.64761 18.5207 8.6084C18.615 8.56918 18.7007 8.51176 18.7728 8.43942C18.845 8.36709 18.9022 8.28125 18.9412 8.1868C18.9801 8.09236 19.0001 7.99117 19 7.889C19 7.68266 18.918 7.48477 18.7721 7.33887C18.6262 7.19297 18.4283 7.111 18.222 7.111ZM10.444 5.556H13.555V7.111H10.444V5.556ZM15.044 18.778H8.96L8.047 8.667H15.952L15.044 18.778Z\"\n        fill=\"#94A0B5\"\n      />\n    </svg>\n  );\n};\n\nexport default IconRemove;\n", "// transform data for formik\nimport { FilterResponseItem, FilterTransformedItem, InitialFiltersWithoutExtraData, InitialValues } from '../types/filter';\n\nexport const fillSavedFilterRowWithExtraData = (\n  initialSavedFilters: InitialFiltersWithoutExtraData,\n  filtersData: Array<FilterTransformedItem>\n): InitialValues => {\n  const inputFilterItems = initialSavedFilters.filters?.length\n    ? initialSavedFilters.filters.map((initial) => {\n        const row = filtersData.find((item) => initial.id.value === item.value);\n\n        return {\n          values: initial.values, // || [],\n          operator: initial.operator,\n          id: row as FilterTransformedItem,\n        };\n      })\n    : [];\n\n  return {\n    filters: inputFilterItems,\n  };\n};\n\nexport const transformResponseFilters = (filters: Array<FilterResponseItem>): Array<FilterTransformedItem> => {\n  return filters.map((item) => {\n    const { caption, id, values, operators, ...rest } = item;\n\n    // \u044F\u043A\u0449\u043E \u0456\u0441\u043D\u0443\u0454 \u043C\u0430\u0441\u0438\u0432 \u0442\u043E\u0434\u0456 \u0440\u043E\u0431\u0438\u043C\u043E \u0434\u043B\u044F \u043D\u044C\u043E\u0433\u043E \u043F\u043E\u0442\u0440\u0456\u0431\u043D\u0438\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u0434\u043B\u044F \u0437\u0440\u0443\u0447\u043D\u0456\u0448\u043E\u0457 \u0440\u043E\u0431\u043E\u0442\u0438 \u0437 react-select\n    let transformedValue;\n    if (Array.isArray(values)) {\n      transformedValue = values.map((val) => {\n        return {\n          label: val.name,\n          value: String(val.id),\n        };\n      });\n    } else {\n      transformedValue = values;\n    }\n\n    // \u0434\u043B\u044F \u0437\u0440\u0443\u0447\u043D\u043E\u0457 \u0440\u043E\u0431\u043E\u0442\u0438 \u0437 select (formik control wrapper)\n    const transformedOperators = operators.map((operator: string) => ({ key: operator, value: operator }));\n\n    return {\n      label: caption,\n      value: String(id),\n      values: transformedValue,\n      operators: [{ key: '', value: '' }, ...transformedOperators],\n      ...rest,\n    };\n  }) as Array<FilterTransformedItem>;\n};\n\nexport const transformWithoutUselessData = (formikData: InitialValues): InitialFiltersWithoutExtraData => {\n  const forSerialization = formikData.filters.map((item) => {\n    const { id, ...rest } = item;\n\n    return {\n      ...rest,\n      id: {\n        label: id.label,\n        value: id.value,\n      },\n    };\n  });\n\n  const outputData: InitialFiltersWithoutExtraData = {\n    filters: forSerialization,\n  };\n\n  return outputData;\n};\n"],
  "mappings": "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",
  "names": []
}
